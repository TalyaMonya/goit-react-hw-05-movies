{"version":3,"file":"static/js/736.3a7aa194.chunk.js","mappings":"8RAEaA,EAAUC,EAAAA,GAAAA,IAAH,6HAOPC,EAAaD,EAAAA,GAAAA,GAAH,8FAMVE,EAAWF,EAAAA,GAAAA,GAAH,mIAQRG,EAAeH,EAAAA,GAAAA,GAAH,iHAMZI,EAAWJ,EAAAA,GAAAA,IAAH,sEAKRK,EAAWL,EAAAA,GAAAA,GAAH,kDAIRM,EAAaN,EAAAA,GAAAA,EAAH,iO,SCsBvB,EAtDa,WACT,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,gHAEaC,EAAAA,EAAAA,IAAeP,GAF5B,gBAEFG,EAFE,EAEFA,KACRC,EAAQD,GAHE,gDAKVK,QAAQC,IAAR,MALU,yDAAH,qDASfH,GACH,GAAE,CAACN,KAGA,UAACR,EAAD,YACI,SAACE,EAAD,UAAY,SAEXS,EAAKO,QACF,SAACf,EAAD,UACKQ,EAAKQ,KAAI,SAAAC,GAAK,OACX,UAAChB,EAAD,WAEKgB,EAAMC,cACH,gBACIC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAG,UAAKH,EAAMI,KAAX,eAGP,gBACIF,IAAG,oDACHC,IAAG,UAAKH,EAAMI,KAAX,eAIX,UAACnB,EAAD,YACI,SAACC,EAAD,UAAWc,EAAMI,QACjB,yBAAG,cAAYJ,EAAMK,kBAhBVL,EAAMM,GADd,OAuBnB,SAACnB,EAAD,UAAY,wDAM3B,C,mMCxDKoB,EAAU,6BACVC,EAAU,mCAEHC,EAAgB,mCAAG,sGACLC,EAAAA,EAAAA,IAAA,UAAaH,EAAb,yCAAqDC,IADhD,uBACpBG,EADoB,EACpBA,KADoB,kBAGrBA,GAHqB,2CAAH,qDAMhBC,EAAgB,mCAAG,WAAMC,GAAN,yFACLH,EAAAA,EAAAA,IAAA,UAChBH,EADgB,mCACkBC,EADlB,iCACkDK,EADlD,gCADK,uBACpBF,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQhBG,EAAc,mCAAG,WAAM1B,GAAN,yFACHsB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,oBACGnB,EADH,oBACsBoB,EADtB,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDASdhB,EAAc,mCAAG,WAAMP,GAAN,yFACHsB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,oBACGnB,EADH,4BAC8BoB,EAD9B,oBADG,uBAClBG,EADkB,EAClBA,KADkB,kBAKnBA,GALmB,2CAAH,sDAQdI,EAAiB,mCAAG,WAAM3B,GAAN,yFACNsB,EAAAA,EAAAA,IAAA,UAChBH,EADgB,oBACGnB,EADH,4BAC8BoB,EAD9B,2BADM,uBACrBG,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","servises/api.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n    margin-top: 30px;\n    padding-right: 80px;\n    padding-left: 80px;\n    padding-bottom: 40px;\n`;\n\nexport const CastHeader = styled.h3`\n    font-size: 25px;\n    font-weight: 500;\n    text-align: center;\n`;\n\nexport const CastList = styled.ul`\n    margin-top: 30px;\n    display: flex;\n    align-items: center;\n    gap: 40px;\n    flex-wrap: wrap;\n`;\n\nexport const CastListItem = styled.li`\n    width: calc((100% - 4 * 40px) / 5);\n    height: 400px;\n    word-wrap: break-word;\n`;\n\nexport const CastInfo = styled.div`\n    margin-top: 20px;\n    max-width: 220px;\n`;\n\nexport const CastName = styled.h3`\n    margin-bottom: 10px;\n`;\n\nexport const NoCastText = styled.p`\n    margin: 30px auto 0 auto;\n    text-align: center;\n    padding: 20px;\n    background-color: #f8f8f8;\n    border-radius: 6px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    max-width: 500px;\n`;","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchMovieCast } from \"servises/api\";\nimport { CastHeader, CastInfo, CastList, CastListItem, CastName, NoCastText, Wrapper } from \"./Cast.styled\";\n\n\nconst Cast = () => {\n    const { movieId } = useParams();\n    const [cast, setCast] = useState([]);\n\n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                const { cast } = await fetchMovieCast(movieId);\n                setCast(cast);\n            } catch (error) {\n                console.log(error);\n            }\n        };\n\n        fetchCast();\n    }, [movieId]);\n\n    return (\n        <Wrapper>\n            <CastHeader>Cast</CastHeader>\n\n            {cast.length ? (\n                <CastList>\n                    {cast.map(actor => (\n                        <CastListItem key={actor.id}>\n\n                            {actor.profile_path ? (\n                                <img\n                                    src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                                    alt={`${actor.name} profile`}\n                                />\n                            ) : (\n                                <img\n                                    src={`https://via.placeholder.com/200x300?text=No+Image`}\n                                    alt={`${actor.name} profile`}\n                                />\n                            )}\n                            \n                            <CastInfo>\n                                <CastName>{actor.name}</CastName>\n                                <p>Character: {actor.character}</p>\n                            </CastInfo>\n                        </CastListItem>\n                    ))}\n                </CastList>\n            ) : (\n                <NoCastText>\n                    We don't have any information about the cast yet.\n                </NoCastText>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default Cast;","import axios from \"axios\";\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = '9e06172264fd25342d03ac1357f3ae3c';\n\nexport const fetchTrendMovies = async () => {\n    const { data } = await axios.get(`${baseURL}/3/trending/movie/day?api_key=${API_KEY}`);\n\n    return data;\n};\n\nexport const fetchMovieByName = async query => {\n    const { data } = await axios.get(\n        `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    );\n\n    return data;\n};\n\nexport const fetchMovieById = async movieId => {\n    const { data } = await axios.get(\n        `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n};\n\n\nexport const fetchMovieCast = async movieId => {\n    const { data } = await axios.get(\n        `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    );\n\n    return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n    const { data } = await axios.get(\n        `${baseURL}/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    );\n\n    return data;\n};"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","NoCastText","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","fetchMovieCast","console","log","length","map","actor","profile_path","src","alt","name","character","id","baseURL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","query","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}